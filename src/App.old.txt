import React, { useState, useEffect, useRef, useCallback } from 'react';
import * as THREE from 'three';
import { Brain, Play, Pause, RotateCcw, SlidersHorizontal } from 'lucide-react';

// Simple orbit controls implementation
class SimpleOrbitControls {
    constructor(camera, domElement) {
        this.camera = camera;
        this.domElement = domElement;
        this.enabled = true;
        this.enableDamping = true;
        this.dampingFactor = 0.05;
        
        this.spherical = new THREE.Spherical();
        this.sphericalDelta = new THREE.Spherical();
        this.target = new THREE.Vector3();
        this.lastPosition = new THREE.Vector3();
        this.offset = new THREE.Vector3();
        
        this.rotateSpeed = 1.0;
        this.zoomSpeed = 1.0;
        this.panSpeed = 1.0;
        
        this.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };
        
        this.state = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2 };
        this.currentState = this.state.NONE;
        
        this.rotateStart = new THREE.Vector2();
        this.rotateEnd = new THREE.Vector2();
        this.rotateDelta = new THREE.Vector2();
        
        this.panStart = new THREE.Vector2();
        this.panEnd = new THREE.Vector2();
        this.panDelta = new THREE.Vector2();
        
        this.dollyStart = new THREE.Vector2();
        this.dollyEnd = new THREE.Vector2();
        this.dollyDelta = new THREE.Vector2();
        
        this.bindEvents();
        this.update();
    }
    
    bindEvents() {
        this.domElement.addEventListener('mousedown', this.onMouseDown.bind(this));
        this.domElement.addEventListener('wheel', this.onMouseWheel.bind(this));
        this.domElement.addEventListener('contextmenu', this.onContextMenu.bind(this));
    }
    
    onMouseDown(event) {
        if (!this.enabled) return;
        
        event.preventDefault();
        
        if (event.button === 0) {
            this.currentState = this.state.ROTATE;
            this.rotateStart.set(event.clientX, event.clientY);
        } else if (event.button === 1) {
            this.currentState = this.state.DOLLY;
            this.dollyStart.set(event.clientX, event.clientY);
        } else if (event.button === 2) {
            this.currentState = this.state.PAN;
            this.panStart.set(event.clientX, event.clientY);
        }
        
        document.addEventListener('mousemove', this.onMouseMove.bind(this));
        document.addEventListener('mouseup', this.onMouseUp.bind(this));
    }
    
    onMouseMove(event) {
        if (!this.enabled) return;
        
        event.preventDefault();
        
        if (this.currentState === this.state.ROTATE) {
            this.rotateEnd.set(event.clientX, event.clientY);
            this.rotateDelta.subVectors(this.rotateEnd, this.rotateStart).multiplyScalar(this.rotateSpeed);
            
            const element = this.domElement;
            this.sphericalDelta.theta -= 2 * Math.PI * this.rotateDelta.x / element.clientHeight;
            this.sphericalDelta.phi -= 2 * Math.PI * this.rotateDelta.y / element.clientHeight;
            
            this.rotateStart.copy(this.rotateEnd);
        } else if (this.currentState === this.state.DOLLY) {
            this.dollyEnd.set(event.clientX, event.clientY);
            this.dollyDelta.subVectors(this.dollyEnd, this.dollyStart);
            
            if (this.dollyDelta.y > 0) {
                this.dollyIn();
            } else if (this.dollyDelta.y < 0) {
                this.dollyOut();
            }
            
            this.dollyStart.copy(this.dollyEnd);
        }
    }
    
    onMouseUp() {
        if (!this.enabled) return;
        
        this.currentState = this.state.NONE;
        document.removeEventListener('mousemove', this.onMouseMove.bind(this));
        document.removeEventListener('mouseup', this.onMouseUp.bind(this));
    }
    
    onMouseWheel(event) {
        if (!this.enabled) return;
        
        event.preventDefault();
        
        if (event.deltaY < 0) {
            this.dollyOut();
        } else if (event.deltaY > 0) {
            this.dollyIn();
        }
    }
    
    onContextMenu(event) {
        if (!this.enabled) return;
        event.preventDefault();
    }
    
    dollyIn() {
        this.sphericalDelta.radius /= 1.1;
    }
    
    dollyOut() {
        this.sphericalDelta.radius *= 1.1;
    }
    
    update() {
        this.offset.copy(this.camera.position).sub(this.target);
        this.spherical.setFromVector3(this.offset);
        
        this.spherical.theta += this.sphericalDelta.theta;
        this.spherical.phi += this.sphericalDelta.phi;
        
        this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi));
        this.spherical.radius = Math.max(10, Math.min(500, this.spherical.radius));
        
        this.spherical.radius += this.sphericalDelta.radius;
        
        this.offset.setFromSpherical(this.spherical);
        this.camera.position.copy(this.target).add(this.offset);
        this.camera.lookAt(this.target);
        
        if (this.enableDamping) {
            this.sphericalDelta.theta *= (1 - this.dampingFactor);
            this.sphericalDelta.phi *= (1 - this.dampingFactor);
            this.sphericalDelta.radius *= (1 - this.dampingFactor);
        } else {
            this.sphericalDelta.set(0, 0, 0);
        }
    }
}

// --- Simulation Constants ---
const FIELD_WIDTH = 160;
const FIELD_HEIGHT = 120;
const POINT_CLOUD_SIZE = FIELD_WIDTH * FIELD_HEIGHT;
const SCOUT_COUNT = 5000;

// --- Scout Types ---
const SCOUT_TYPES = {
    EDGE: 'EDGE',
    MOTION: 'MOTION',
    LUMINANCE: 'LUMINANCE',
    COLOR_R: 'COLOR_R',
    COLOR_G: 'COLOR_G',
    COLOR_B: 'COLOR_B',
};

// --- Main React Component ---
const GeometricPerceptionEngine = () => {
    const mountRef = useRef(null);
    const videoRef = useRef(null);
    const [isRunning, setIsRunning] = useState(true);
    const [info, setInfo] = useState('Initializing...');
    const [scoutVisibility, setScoutVisibility] = useState({
        [SCOUT_TYPES.EDGE]: true,
        [SCOUT_TYPES.MOTION]: true,
        [SCOUT_TYPES.LUMINANCE]: true,
        [SCOUT_TYPES.COLOR_R]: false,
        [SCOUT_TYPES.COLOR_G]: false,
        [SCOUT_TYPES.COLOR_B]: false,
    });

    const simState = useRef({
        // The "World" - a 3D point cloud driven by the webcam
        world_points: new Float32Array(POINT_CLOUD_SIZE * 3), // x, y, z
        world_colors: new Float32Array(POINT_CLOUD_SIZE * 3), // r, g, b
        world_lum_prev: new Float32Array(POINT_CLOUD_SIZE),
        
        // The "Mind" - a population of scouts navigating the 3D world
        scouts: [],
    });

    // --- Initialization ---
    const initializeSystem = useCallback(() => {
        const { current: state } = simState;
        state.scouts = [];
        for (let i = 0; i < SCOUT_COUNT; i++) {
            let type;
            if (i < SCOUT_COUNT * 0.3) type = SCOUT_TYPES.EDGE;
            else if (i < SCOUT_COUNT * 0.5) type = SCOUT_TYPES.MOTION;
            else if (i < SCOUT_COUNT * 0.7) type = SCOUT_TYPES.LUMINANCE;
            else if (i < SCOUT_COUNT * 0.8) type = SCOUT_TYPES.COLOR_R;
            else if (i < SCOUT_COUNT * 0.9) type = SCOUT_TYPES.COLOR_G;
            else type = SCOUT_TYPES.COLOR_B;
            
            state.scouts.push({
                type: type,
                position: new THREE.Vector3(
                    (Math.random() - 0.5) * FIELD_WIDTH * 0.8,
                    (Math.random() - 0.5) * FIELD_HEIGHT * 0.8,
                    (Math.random() - 0.5) * 20
                ),
                velocity: new THREE.Vector3(0, 0, 0),
            });
        }
    }, []);

    // --- Core Simulation Loop ---
    const evolveSystem = useCallback((ctx) => {
        const { current: state } = simState;
        if (!isRunning || !videoRef.current || videoRef.current.readyState < 2) return;

        // 1. PERCEIVE THE WORLD: Update point cloud from webcam
        ctx.drawImage(videoRef.current, 0, 0, FIELD_WIDTH, FIELD_HEIGHT);
        const imageData = ctx.getImageData(0, 0, FIELD_WIDTH, FIELD_HEIGHT).data;
        
        const current_lum = new Float32Array(POINT_CLOUD_SIZE);
        for (let y = 0; y < FIELD_HEIGHT; y++) {
            for (let x = 0; x < FIELD_WIDTH; x++) {
                const i = y * FIELD_WIDTH + x;
                const r = imageData[i * 4] / 255;
                const g = imageData[i * 4 + 1] / 255;
                const b = imageData[i * 4 + 2] / 255;
                const luminance = (r * 0.299 + g * 0.587 + b * 0.114);

                state.world_points[i * 3] = x - FIELD_WIDTH / 2;
                state.world_points[i * 3 + 1] = -(y - FIELD_HEIGHT / 2); // Invert Y
                state.world_points[i * 3 + 2] = luminance * 40 - 20; // Brightness as depth

                state.world_colors[i * 3] = r;
                state.world_colors[i * 3 + 1] = g;
                state.world_colors[i * 3 + 2] = b;
                current_lum[i] = luminance;
            }
        }

        // 2. UPDATE THE MIND: Evolve scouts based on the 3D world
        state.scouts.forEach(scout => {
            // Find the closest point in the world cloud to the scout
            let closestPointIndex = -1;
            let min_dist_sq = Infinity;

            const sx_grid = Math.round(scout.position.x + FIELD_WIDTH / 2);
            const sy_grid = Math.round(-(scout.position.y - FIELD_HEIGHT / 2));
            
            const searchRadius = 5;
            for(let y = -searchRadius; y <= searchRadius; y++) {
                for(let x = -searchRadius; x <= searchRadius; x++) {
                    const ix = sx_grid + x;
                    const iy = sy_grid + y;
                    if(ix >= 0 && ix < FIELD_WIDTH && iy >= 0 && iy < FIELD_HEIGHT) {
                        const idx = iy * FIELD_WIDTH + ix;
                        const point_pos = new THREE.Vector3(
                            state.world_points[idx*3],
                            state.world_points[idx*3+1],
                            state.world_points[idx*3+2]
                        );
                        const distSq = scout.position.distanceToSquared(point_pos);
                        if (distSq < min_dist_sq) {
                            min_dist_sq = distSq;
                            closestPointIndex = idx;
                        }
                    }
                }
            }
            
            if (closestPointIndex === -1) return;

            // Calculate force based on scout type and local field properties
            let force = new THREE.Vector3(0, 0, 0);
            const idx = closestPointIndex;

            switch(scout.type) {
                case SCOUT_TYPES.LUMINANCE: {
                    const targetZ = current_lum[idx] * 40 - 20;
                    force.z = (targetZ - scout.position.z) * 0.1;
                    break;
                }
                case SCOUT_TYPES.EDGE: {
                    const neighbor_idx = idx + 1;
                    if (neighbor_idx < POINT_CLOUD_SIZE) {
                         const p1 = new THREE.Vector3(state.world_points[idx*3], state.world_points[idx*3+1], state.world_points[idx*3+2]);
                         const p2 = new THREE.Vector3(state.world_points[neighbor_idx*3], state.world_points[neighbor_idx*3+1], state.world_points[neighbor_idx*3+2]);
                         force = p2.sub(p1).multiplyScalar(0.5);
                    }
                    break;
                }
                case SCOUT_TYPES.MOTION: {
                    const motion = (current_lum[idx] - state.world_lum_prev[idx]) * 100;
                    force.z = motion;
                    break;
                }
                case SCOUT_TYPES.COLOR_R:
                case SCOUT_TYPES.COLOR_G:
                case SCOUT_TYPES.COLOR_B: {
                    const colorIndex = scout.type === SCOUT_TYPES.COLOR_R ? 0 : scout.type === SCOUT_TYPES.COLOR_G ? 1 : 2;
                    const color_val = state.world_colors[idx * 3 + colorIndex];
                    const targetPos = new THREE.Vector3(
                        state.world_points[idx*3],
                        state.world_points[idx*3+1],
                        state.world_points[idx*3+2]
                    );
                    force = targetPos.sub(scout.position).multiplyScalar(color_val * 0.2);
                    break;
                }
                default: break;
            }
            
            scout.velocity.add(force).multiplyScalar(0.9);
            scout.position.add(scout.velocity);
            
            // Keep scouts within the webcam bounds
            const maxX = FIELD_WIDTH * 0.4;
            const maxY = FIELD_HEIGHT * 0.4;
            const maxZ = 15;
            
            scout.position.x = Math.max(-maxX, Math.min(maxX, scout.position.x));
            scout.position.y = Math.max(-maxY, Math.min(maxY, scout.position.y));
            scout.position.z = Math.max(-maxZ, Math.min(maxZ, scout.position.z));
        });

        state.world_lum_prev.set(current_lum);

    }, [isRunning]);

    // --- Three.js Setup ---
    useEffect(() => {
        if (!mountRef.current) return;
        let isMounted = true;
        const { current: state } = simState;

        const hiddenCanvas = document.createElement('canvas');
        hiddenCanvas.width = FIELD_WIDTH;
        hiddenCanvas.height = FIELD_HEIGHT;
        const hiddenCtx = hiddenCanvas.getContext('2d', { willReadFrequently: true });
        
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(stream => {
                if (isMounted && videoRef.current) {
                    videoRef.current.srcObject = stream;
                    videoRef.current.play().catch(e => console.error("Video play failed:", e));
                    setInfo("Webcam connected. Perceiving...");
                }
            })
            .catch(err => setInfo("Error: Webcam access denied."));

        initializeSystem();

        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x050710);
        const camera = new THREE.PerspectiveCamera(60, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);
        camera.position.set(0, 0, 60);

        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        mountRef.current.appendChild(renderer.domElement);

        const controls = new SimpleOrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        
        // Set initial target to center of webcam field
        controls.target.set(0, 0, 0);
        
        // World Point Cloud
        const worldGeo = new THREE.BufferGeometry();
        worldGeo.setAttribute('position', new THREE.BufferAttribute(state.world_points, 3));
        worldGeo.setAttribute('color', new THREE.BufferAttribute(state.world_colors, 3));
        const worldMat = new THREE.PointsMaterial({ size: 1.5, vertexColors: true, sizeAttenuation: true });
        const worldSystem = new THREE.Points(worldGeo, worldMat);
        scene.add(worldSystem);

        // Scout Point Cloud
        const scoutGeo = new THREE.BufferGeometry();
        scoutGeo.setAttribute('position', new THREE.BufferAttribute(new Float32Array(SCOUT_COUNT * 3), 3));
        scoutGeo.setAttribute('color', new THREE.BufferAttribute(new Float32Array(SCOUT_COUNT * 3), 3));
        const scoutMat = new THREE.PointsMaterial({ size: 1.2, vertexColors: true, sizeAttenuation: true, transparent: true, opacity: 0.9 });
        const scoutSystem = new THREE.Points(scoutGeo, scoutMat);
        scene.add(scoutSystem);
        
        const animate = () => {
            if (!isMounted) return;
            requestAnimationFrame(animate);
            controls.update();
            evolveSystem(hiddenCtx);

            // Update visuals
            worldSystem.geometry.attributes.position.needsUpdate = true;
            worldSystem.geometry.attributes.color.needsUpdate = true;

            const scoutPositions = scoutSystem.geometry.attributes.position;
            const scoutColorsAttr = scoutSystem.geometry.attributes.color;
            state.scouts.forEach((scout, i) => {
                const visible = scoutVisibility[scout.type];
                scoutPositions.setXYZ(i, scout.position.x, scout.position.y, visible ? scout.position.z : -2000);
                
                const color = new THREE.Color();
                if (scout.type === SCOUT_TYPES.EDGE) color.set(0xff8800);
                else if (scout.type === SCOUT_TYPES.MOTION) color.set(0x00ffff);
                else if (scout.type === SCOUT_TYPES.LUMINANCE) color.set(0xffffff);
                else if (scout.type === SCOUT_TYPES.COLOR_R) color.set(0xff0000);
                else if (scout.type === SCOUT_TYPES.COLOR_G) color.set(0x00ff00);
                else if (scout.type === SCOUT_TYPES.COLOR_B) color.set(0x0000ff);
                scoutColorsAttr.setXYZ(i, color.r, color.g, color.b);
            });
            scoutPositions.needsUpdate = true;
            scoutColorsAttr.needsUpdate = true;
            
            renderer.render(scene, camera);
        };
        animate();

        return () => {
            isMounted = false;
            const videoElement = videoRef.current;
            const mountElement = mountRef.current;
            
            if (videoElement && videoElement.srcObject) {
                videoElement.srcObject.getTracks().forEach(track => track.stop());
            }
            if (mountElement && renderer.domElement) {
                mountElement.removeChild(renderer.domElement);
            }
        };
    }, [evolveSystem, initializeSystem, scoutVisibility]);

    return (
        <div className="w-full h-screen bg-black text-white flex flex-col font-sans relative overflow-hidden">
            <video ref={videoRef} style={{ display: 'none' }} playsInline></video>
            <div ref={mountRef} className="w-full h-full bg-gray-900" style={{ minHeight: '100vh' }} />
            
            <div className="absolute top-4 left-4 z-10">
                <div className="bg-black/50 backdrop-blur-sm p-4 rounded-lg border border-white/20 space-y-3 w-72">
                    <h1 className="text-2xl font-bold text-cyan-400 flex items-center gap-2"><Brain /> Geometric Perception</h1>
                    <p className="text-sm text-gray-300">{info}</p>
                     <div className="flex gap-2">
                        <button onClick={() => setIsRunning(p => !p)} className={`w-full px-3 py-1.5 rounded flex items-center justify-center gap-2 font-semibold transition-colors ${isRunning ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'}`}>
                            {isRunning ? <Pause size={16}/> : <Play size={16}/>} {isRunning ? 'Pause' : 'Play'}
                        </button>
                        <button onClick={initializeSystem} className="w-full px-3 py-1.5 rounded flex items-center justify-center gap-2 bg-gray-600 hover:bg-gray-700 transition-colors"><RotateCcw size={16}/> Reset</button>
                    </div>
                </div>
            </div>

            <div className="absolute bottom-4 left-4 z-10">
                 <div className="bg-black/50 backdrop-blur-sm p-4 rounded-lg border border-white/20 space-y-2">
                    <h2 className="font-bold text-lg flex items-center gap-2"><SlidersHorizontal/> Scout Visibility</h2>
                    <div className="grid grid-cols-2 gap-x-4 gap-y-2 text-sm">
                        {Object.entries(SCOUT_TYPES).map(([key, type]) => (
                            <label key={type} className="flex items-center gap-2 cursor-pointer">
                                <input type="checkbox" checked={scoutVisibility[type]} onChange={() => setScoutVisibility(prev => ({...prev, [type]: !prev[type]}))}
                                className="form-checkbox h-4 w-4 accent-cyan-400 bg-gray-700 border-gray-600 rounded"
                                />
                                <span style={{ color: 
                                    type === SCOUT_TYPES.EDGE ? '#ff8800' :
                                    type === SCOUT_TYPES.MOTION ? '#00ffff' :
                                    type === SCOUT_TYPES.LUMINANCE ? '#ffffff' :
                                    type === SCOUT_TYPES.COLOR_R ? '#ff0000' :
                                    type === SCOUT_TYPES.COLOR_G ? '#00ff00' : '#0000ff'
                                }}>{type.replace('_', ' ')}</span>
                            </label>
                        ))}
                    </div>
                 </div>
            </div>
        </div>
    );
};

export default GeometricPerceptionEngine;